<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.apache.wicket</groupId>
    <artifactId>wicket-parent</artifactId>
    <version>1.5-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>
  <artifactId>wicket</artifactId>
  <packaging>jar</packaging>
  <name>Wicket</name>
  <description>
	A module that provides dependencies to all core submodules
	needed to run Wicket application. This way Maven users can
	depend only on this module without bothering that Wicket core depends on several modules.
  </description>
  <dependencies>
    <dependency>
      <groupId>org.apache.wicket</groupId>
      <artifactId>wicket-core</artifactId>
      <version>${project.parent.version}</version>
    </dependency>
  </dependencies>
  <build>
	<plugins>
		<plugin>
			<!-- Do not create (and deploy) -tests.jar for this project -->
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-jar-plugin</artifactId>
			<version>2.3.1</version>
			<executions>
				<execution>
					<goals>
						<goal>test-jar</goal>
					</goals>
					<configuration>
						<skip>true</skip>
					</configuration>
				</execution>
			</executions>
		</plugin>
	<!--
		How it works:
		I) In 'prepare-package' phase do:
			1) unpack the dependencies in target/classes so it looks like
				all files (*.class, *.properties, ...) belong to this project
			2) re-generate META-INF/MANIGEST.MF so that it contains all OSGi
				headers for all packages

		II) In 'package' phase maven-jar-plugin collects all that in the
			final artifact
	-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>2.1</version>
        <executions>
          <execution>
            <id>unpack-dependencies</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.outputDirectory}</outputDirectory>
              <includes>**/*</includes>
              <includeGroupIds>org.apache.wicket</includeGroupIds>
            </configuration>
          </execution>
          <execution>
            <id>unpack-source-dependencies</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
		<classifier>sources</classifier>
              <outputDirectory>${project.build.outputDirectory}</outputDirectory>
              <includes>**/*</includes>
              <includeGroupIds>org.apache.wicket</includeGroupIds>
            </configuration>
          </execution>

        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <version>2.1.0</version>
        <executions>
          <execution>
            <id>bundle-manifest</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>manifest</goal>
            </goals>
            <configuration>
              <instructions>
                <Import-Package>org.apache.wicket*</Import-Package>
                <DynamicImport-Package>*</DynamicImport-Package>
                <_nouses>true</_nouses>
              </instructions>
            </configuration>
          </execution>
        </executions>
      </plugin>

<plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <configuration>
          <!-- Do not deploy -sources.jar file.
               This project has no .java files
          -->
          <attach>false</attach>
        </configuration>
      </plugin>

	</plugins>
  </build>
</project>
